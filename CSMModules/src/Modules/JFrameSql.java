/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameSql.java
 *
 * Created on 2010-5-11, 15:31:12
 */
package Modules;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import java.util.*;

/**
 *
 * @author Administrator
 */
public class JFrameSql extends javax.swing.JFrame {

    private JFileChooser chooser;
    Vector columnType = new Vector();
    String outPath = "out";//文件输出目录

    /** Creates new form JFrameSql */
    public JFrameSql() {
        initComponents();

        int iThisWidth = 1016;
        int iThisHight = 658;
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screen.width - iThisWidth) / 2;
        int y = (screen.height - iThisHight) / 2;
        this.setBounds(x, y, iThisWidth, iThisHight);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("执行SQL脚本");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jButton1.setText("加载SQL脚本");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("执行SQL语句");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("清除文本区");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("保存数据到Excel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("保存数据到DBF");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton3.setText("退出");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton1))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        textArea1.setFont(new java.awt.Font("Dialog", 0, 14));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableResult.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTableResult);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("执行结果列表");

        jLabel2.setText("在下面的文本编辑区输入SQL语句或命令，点击\"执行SQL\"按钮即可执行");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(487, 487, 487)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String Sql = textArea1.getText();
        Vector content = new Vector();
        Vector header = null;
        int i = 0;
        try {
            // TODO add your handling code here:
            Statement stat = (Statement) Main.conn.createStatement();
            BufferedReader reader = new BufferedReader(new StringReader(textArea1.getText()));
            String SqlLine = reader.readLine();
            String statement = " ";
            while (SqlLine != null) {
                statement = SqlLine.trim();
                SqlLine = reader.readLine();
                while (SqlLine != null) {
                    if (SqlLine != null) {
                        if (!SqlLine.trim().toUpperCase().equals("GO") && !SqlLine.trim().equals("") && !SqlLine.trim().equals("\n")) {
                            statement = statement + "\n" + SqlLine;
                        }
                    }
                    SqlLine = reader.readLine();
                }
                // System.out.println(statement);

                if (SqlLine == null || SqlLine.trim().toUpperCase().equals("GO")) {
                    i++;
                    if (isUpdateStatement(statement)) {
                        //System.out.println("update_statement" + i + ":" + statement);
                        int returnValue = stat.executeUpdate(statement);
                        String msg = "" + returnValue;
                        if (i == 1) {
                            header = new Vector();
                        }
                        header.add("语句执行结果");
                        header.add("返回值");
                        Vector row = new Vector();
                        row.add("sql语句已执行");
                        row.add(msg);
                        content.add(row);
                        mytablemodel = new DefaultTableModel(content, header);
                        jTableResult.setModel(mytablemodel);
                        fitTableColumns(jTableResult);//表格列宽自适应
                        if (SqlLine != null && !SqlLine.trim().equals("\n") && !SqlLine.trim().equals("") && !SqlLine.trim().toUpperCase().equals("GO")) {
                            statement = SqlLine.trim();
                        }
                        if (SqlLine != null && SqlLine.trim().toUpperCase().equals("GO")) {
                            SqlLine = reader.readLine();
                            if (SqlLine != null && !SqlLine.equals("\n") && !SqlLine.equals("") && !SqlLine.trim().toUpperCase().equals("GO")) {
                                statement = SqlLine.trim();
                            }
                        }
                    } else {
                        boolean hasResultSet = stat.execute(statement);
                        if (!hasResultSet) {
                            hasResultSet = stat.getMoreResults();
                        }
                        if (hasResultSet) {
                            showResultSet(stat, columnType);
                            hasData = true;
                        }
                        if (statement.toLowerCase().contains("select")) {
                            int m = statement.toLowerCase().indexOf("from");
                            int n = statement.toLowerCase().indexOf("where");
                            if (n > 0) {
                                tableName = statement.substring(m + 4, n).trim();
                            } else {
                                tableName = statement.substring(m + 4, statement.length()).trim();
                            }
                        } else {
                            tableName = "result";
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            // JOptionPane.showMessageDialog(this, msg);
            if (i == 1) {
                header = new Vector();
            }
            if (i > 0) {
                header.add("执行结果");
                header.add("返回值");
                Vector row = new Vector();
                row.add("第" + i + "句执行成功");
                row.add(msg);
                content.add(row);
                mytablemodel = new DefaultTableModel(content, header);
                jTableResult.setModel(mytablemodel);
                fitTableColumns(jTableResult);//表格列宽自适应
                Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                Main.logger.warning(ex.getMessage());
            } else {
                header = new Vector();
                header.add("执行结果");
                header.add("返回值");
                Vector row = new Vector();
                row.add(ex.getMessage());
                content.add(row);
                mytablemodel = new DefaultTableModel(content, header);
                jTableResult.setModel(mytablemodel);
                fitTableColumns(jTableResult);//表格列宽自适应
            }

        } catch (IOException ex) {
            Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
            new JFrameWarning(ex.getLocalizedMessage()).setVisible(true);

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    boolean isUpdateStatement(String statement) {
        //System.out.println("isUpdateStatement:"+statement);
        boolean yes = false;
        String[] updateStatement = {"INSERT", "DELETE", "UPDATE", "TRUNCATE", "CREATE", "DROP", "ALTER", "INTO"};
        for (int i = 0; i < updateStatement.length; i++) {
            if (statement.toUpperCase().contains(updateStatement[i])) {
                yes = true;
                break;
            }
        }
        return yes;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = SQLChooser();
        if (name != null) {
            Thread myThread = new SqlLoader(name);
            SwingUtilities.invokeLater(myThread);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    class SqlLoader extends Thread {

        DefaultTableModel mytablemodel;
        String filename = null;
        int batch = 0;
        Connection conn = null;

        public SqlLoader(String name) {
            filename = name;
        }

        @Override
        public void run() {

            Vector header = new Vector();
            Vector content = new Vector();
            header.add("SQL批序号");
            header.add("执行结果");
            String SqlStatement = "";
            String line = "";
            BufferedReader br = null;
            Statement stat = null;

            try {
                FileReader fr = new FileReader(filename);
                br = new BufferedReader(fr);
                line = br.readLine();
                stat = (Statement) Main.conn.createStatement();
                SqlStatement = line;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                Main.logger.warning(ex.getLocalizedMessage());
            } catch (IOException ex) {
                Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                Main.logger.warning(ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                Main.logger.warning(ex.getLocalizedMessage());
            }

            while (line != null) {
                Vector row = new Vector();
                try {
                    line = br.readLine();
                    if (line != null) {
                        if (line.toUpperCase().equals("GO")) {
                            textArea1.append(SqlStatement);
                            batch++;
                            //System.out.println("batch: " + batch + "\n" + SqlStatement);
                            row.add(String.valueOf(batch));
                            stat.clearBatch();
                            stat.addBatch(SqlStatement);
                            int[] result = stat.executeBatch();
                            SqlStatement = "";
                            row.add("成功");
                            content.add(row);
                        } else if (!line.toLowerCase().startsWith("print")) {
                            SqlStatement = SqlStatement + "\n" + line;
                        }
                    }
                } catch (SQLException ex) {
                    SqlStatement = "";
                    String msg = "失败：" + ex.getMessage();
                    row.add(msg);
                    content.add(row);
                    Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                    Main.logger.warning(ex.getMessage());
                } catch (IOException ex) {
                    Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                    Main.logger.warning(ex.getMessage());
                }
            }

            if (batch > 0) {
                mytablemodel = new DefaultTableModel(content, header);
                jTableResult.setModel(mytablemodel);
                fitTableColumns(jTableResult);// 表格列宽自适应
            }
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
                Main.logger.warning(ex.getMessage());
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        textArea1.setText("");
        DefaultTableModel md = new DefaultTableModel();
        jTableResult.setModel(md);
        this.hasData = false;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (!hasData) {
            JOptionPane.showMessageDialog(this, "没有数据需要保存!");
            return;
        }

        String outputFile = tableName + getDateString() + ".xls";
               pathExist(outPath);//检查并创建文件输出目录
        String outputFile1 = outPath + "\\" + outputFile;
        JTableToExcel tbexcel = new JTableToExcel();
        boolean addSerial = false;
        try {
            tbexcel.saveToExcel(jTableResult, columnType, outputFile1, addSerial);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
            Main.logger.warning(ex.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
            Main.logger.warning(ex.getMessage());
        }

        String msg = "数据已保存到 " + outputFile1 + ",记录总数:" + jTableResult.getRowCount();
        JOptionPane.showMessageDialog(this, msg);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (!hasData) {
            JOptionPane.showMessageDialog(this, "没有数据需要保存!");
            return;
        }
        pathExist(outPath);//检查并创建文件输出目录
        TableModel md = jTableResult.getModel();
        String outputFile = tableName + getDateString() + ".dbf";
        String outputFile1 = outPath + "\\" + outputFile;
        JTableToDBF toDBF = new JTableToDBF();
        try {
            int n = toDBF.saveToDBF(jTableResult, columnType, outputFile1);
            String msg = outputFile + " 已保存到目录:" + outPath + ",记录总数：" + n;
            JOptionPane.showMessageDialog(this, msg);
        } catch (JDBFException ex) {
            Main.logger.warning(ex.getMessage());
            new JFrameWarning(ex.getLocalizedMessage()).setVisible(true);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(JFrameSql.class.getName()).log(Level.SEVERE, null, ex);
            Main.logger.warning(ex.getMessage());
            new JFrameWarning(ex.getLocalizedMessage()).setVisible(true);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    String unformatDigit(String s) {
        String number = s.trim();

        while (number.contains(",")) {
            StringBuilder sb = new StringBuilder(number);
            int n = number.indexOf(',');
            sb.deleteCharAt(n);
            number = sb.toString();
        }

        return number;
    }

    String getDateString() {
        String date = "1900";
        GregorianCalendar d = new GregorianCalendar();
        int thisYear = d.get(Calendar.YEAR);
        int thisMonth = d.get(Calendar.MONTH) + 1;
        int thisDay = d.get(Calendar.DAY_OF_MONTH);
        date = String.format("%4d%02d%02d", thisYear, thisMonth, thisDay);
        return date;
    }

    private void showResultSet(Statement stat, Vector columnType) throws SQLException {
        Vector content = new Vector();
        Vector header = new Vector();
        ResultSet SqlResult = stat.getResultSet();
        ResultSetMetaData metaData = SqlResult.getMetaData();
        int columnCount = metaData.getColumnCount();
        int[] varchar_len = new int[columnCount];
        columnType.removeAllElements();
        for (int i = 1; i <= columnCount; i++) {
            String name = metaData.getColumnName(i);
            header.add(name);
            JDBColumn column = new JDBColumn();
            String typeName = metaData.getColumnTypeName(i);
            column.setTypeName(typeName);
            column.setcolumnWidth(10);
            columnType.add(column);
            varchar_len[i - 1] = 1;
        }
        DecimalFormat myFormatter = new DecimalFormat("###,###,###,###.##");
        String sqlInt = "int,tinyint,smallint";
        String sqlLong = "bigint";
        String sqlFloat = "float,real,money,numeric";
        String sqlMoney = "money";

        int line = 1;
        while (SqlResult.next()) {
            Vector row = new Vector();
            for (int i = 1; i <= columnCount; i++) {
                String columnData = "";
                String type = metaData.getColumnTypeName(i);

                if (sqlInt.contains(type)) {
                    columnData = String.format("%8d", SqlResult.getLong(i));
                } else if (sqlLong.contains(type)) {
                    columnData = String.format("%12d", SqlResult.getLong(i));
                } else if (sqlFloat.contains(type)) {
                    columnData = String.format("%10.2f", SqlResult.getFloat(i));
                } else if (type.equals("money")) {
                    columnData = myFormatter.format(SqlResult.getDouble(i));
                //coloumnData = String.format("%13.2f", SqlResult.getDouble(i));

                } else if (type.contains("char")) {
                    columnData = SqlResult.getString(i);
                    if (columnData != null) {
                        columnData = columnData.trim();
                        if (columnData.length() * 2 > varchar_len[i - 1]) {
                            varchar_len[i - 1] = columnData.length() * 2;
                        }
                    }
                    JDBColumn dbcol = (JDBColumn) columnType.elementAt(i - 1);
                    dbcol.setcolumnWidth(varchar_len[i - 1]);
                    columnType.setElementAt(dbcol, i - 1);
                // System.out.println(dbcol.getcolumnWidth());

                } else if (type.contains("datetime")) {
                    columnData = SqlResult.getString(i);
                    int w = 23;
                    JDBColumn dbcol = (JDBColumn) columnType.elementAt(i - 1);
                    dbcol.setcolumnWidth(w);
                    columnType.setElementAt(dbcol, i - 1);
                }
                row.add(columnData);
            }
            content.add(row);
        }
        SqlResult.close();

        mytablemodel = new DefaultTableModel(content, header);
        jTableResult.setModel(mytablemodel);
        fitTableColumns(jTableResult);//表格列宽自适应
    }

    //表格列宽自适应方法
    private void fitTableColumns(JTable myTable) {
        JTableHeader header = myTable.getTableHeader();
        int rowCount = myTable.getRowCount();

        Enumeration columns = myTable.getColumnModel().getColumns();
        while (columns.hasMoreElements()) {
            TableColumn column = (TableColumn) columns.nextElement();
            int col = header.getColumnModel().getColumnIndex(column.getIdentifier());
            int width = (int) myTable.getTableHeader().getDefaultRenderer().getTableCellRendererComponent(myTable, column.getIdentifier(), false, false, -1, col).getPreferredSize().getWidth();
            for (int row = 0; row < rowCount; row++) {
                int preferedWidth = (int) myTable.getCellRenderer(row, col).getTableCellRendererComponent(myTable,
                        myTable.getValueAt(row, col), false, false, row, col).getPreferredSize().getWidth();
                width = Math.max(width, preferedWidth);
            }
            header.setResizingColumn(column); // 此行很重要
            column.setWidth(width + myTable.getIntercellSpacing().width);
        }
    }

    private String SQLChooser() {
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.addChoosableFileFilter(new SQLFilter());

        String name = null;

        int result = chooser.showOpenDialog(null);
        //if file selected, open it and read it in to SQLServer

        if (result == JFileChooser.APPROVE_OPTION) {
            name = chooser.getSelectedFile().getPath();
        }

        return name;
    }
//检查并创建目录
    public void pathExist(String path) {
        File file = new File(path);
        //判断文件夹是否存在,如果不存在则创建文件夹
        if (!file.exists()) {
            file.mkdir();
            System.out.println(path + "--目录已经建立");
        } else {
            System.out.println(path + "--目录已经存在");
        }
    }
    private boolean hasData = false;
    private String tableName = "result";
    private DefaultTableModel mytablemodel;
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableResult;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
